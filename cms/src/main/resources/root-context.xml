<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->

	<!-- ♬: 1) -->
	<!-- PropertyPlaceholderConfigurer를 이용해  외부프로퍼티(db.properties)를 참조할 수 있게 적용 가능합니다. -->
	<!-- 보다 쉽게 말하자면, db.properties파일에 dataSource의 객체 추가, 
		 2)에서 ${}를 통해 데이터를 가져올 수 있습니다. -->
<!-- 	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> -->
<!-- 		<property name="locations"> 단일값일 경우 location -->
<!-- 			<list> -->
<!-- 				<value>classpath:mybatis/db.properties</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	
	
	
	<!-- ♬: 2) -->
	<!-- 참조한 db.properties를 읽어  BasicDataSource(데이터 베이스 커넥션 풀객체) Bean에 추가합니다. -->
	<!-- MySQL dataSource : DBCP기능, MySQL과 연결 담당 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
<!-- 		<property name="url" value="jdbc:mysql://localhost:3306/ndcnc?allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=UTC"> </property> -->
		<property name="url" value="jdbc:mysql://cms.ndcc.co.kr:3306/ndcnc?allowMultiQueries=true&amp;useSSL=false&amp;serverTimezone=UTC"> </property>
		<property name="username" value="ndcnc"></property>
		<property name="password" value="ckdduq0712~"></property>
	</bean>

	<!-- ♬: 3) -->
	<!-- mybatis의 SqlSession을 인스턴스화 하기위한 객체 SqlSessionFactoryBean Bean을 추가합니다. -->
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>


	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession" />
	</bean>










	<!-- 메일보내기 -->
	<bean class="org.springframework.mail.javamail.JavaMailSenderImpl" id="mailSender">
		<property value="smtp.daum.net" name="host" />
		<property value="465" name="port" />
		<property value="master@naedamcnc.com" name="username" />
		<property value="ckdduq0712" name="password" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.smtp.ssl.enable">true</prop>
				<prop key="mail.debug">true</prop>
			</props>
		</property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<tx:annotation-driven/>

</beans>
